<project name="zaproxy-test" default="test" basedir=".">
	<description>Run the ZAP JUnit tests.</description>
	<!-- set global properties for this build -->
    <property name="build" location="build" />
    <property name="build.src" location="src-build" />
    <property name="helpertasks.jar.name" value="helpertasks.jar" />
    <property name="lib.dir" location="lib" />
    <property name="src" location="src" />
    <property name="src.version" value="1.7" />
	<property name="zaproxy" location="../zaproxy" />
	<property name="zaproxy-2.2" location="../zaproxy-2.2" />
	<property name="zaproxy-extensions" location="../zap-extensions" />
	<property name="zaproxy-extensions-beta" location="../zap-extensions-beta" />
	<property name="zaproxy-extensions-alpha" location="../zap-extensions-alpha" />

    <path id="build.helpertasks.classpath">
        <fileset dir="${lib.dir}" includes="${helpertasks.jar.name}"/>
        <fileset dir="${zaproxy}/build/zap" includes="zap.jar"/>
    </path>

    <!-- Requires ZAP's clientapi at runtime (built with zaproxy project and included with zap.jar) -->
    <typedef name="stopzapwithtimeout" classname="org.zaproxy.ant.zap.taskdefs.StopZapTimeout" classpathref="build.helpertasks.classpath" />

    <!-- Detect Operating system -->
    <condition property="isMac">
        <os family="mac" />
    </condition>
    <condition property="isUnix">
        <os family="unix" />
    </condition>
    <condition property="isWindows">
        <os family="windows" />
    </condition>
	
    <target name="init">
        <delete dir="${build}" includeEmptyDirs="true" />
        <mkdir dir="${build}" />
    </target>

    <target name="build-helpertasks-jar" depends="init">
        <local name="build.classes.dir" />
        <property name="build.classes.dir" location="${build}/classes" />

        <delete dir="${build.classes.dir}" includeEmptyDirs="true" />
        <mkdir dir="${build.classes.dir}"/>

        <javac srcdir="${build.src}" destdir="${build.classes.dir}" source="${src.version}" 
            target="${src.version}" includeantruntime="false" encoding="UTF-8">
            <!-- Include required ZAP's clientapi -->
            <classpath>
                <fileset dir="${zaproxy}/build/zap">
                    <include name="zap.jar" />
                </fileset>
            </classpath>
        </javac>

        <jar jarfile="${lib.dir}/${helpertasks.jar.name}" update="true" compress="false" basedir="${build.classes.dir}" />

        <delete dir="${build.classes.dir}" includeEmptyDirs="true" />
    </target>

    <macrodef name="compile-extensions-unittests">
        <attribute name="basedir"/>
        <attribute name="destdir" />
        <sequential>
            <javac srcdir="@{basedir}/test" destdir="@{destdir}" source="${src.version}" target="${src.version}" includeantruntime="false" debug="${debug}">
                <classpath>
                    <fileset dir="@{basedir}/testlib">
                        <include name="*.jar" />
                    </fileset>
                    <fileset dir="@{basedir}/lib">
                        <include name="*.jar" />
                    </fileset>
                    <pathelement location="@{basedir}/build/build"/>
                </classpath>
            </javac>
        </sequential>
    </macrodef>

    <target name="compile" depends="init" description="compile the source ">
        <echo message="Compiling the source..." />

        <!-- Compile with debug information if the property "javac.debug" is set to true -->
        <local name="debug" />
        <condition property="debug" value="true" else="false">
            <istrue value="${javac.debug}" />
        </condition>

        <compile-extensions-unittests basedir="${zaproxy-extensions}" destdir="${build}" />
        <compile-extensions-unittests basedir="${zaproxy-extensions-beta}" destdir="${build}" />
        <compile-extensions-unittests basedir="${zaproxy-extensions-alpha}" destdir="${build}" />

    	<!-- Compile the java code from ${src} into ${build} -->
        <!--javac srcdir="${src}" destdir="${build}" classpath="zap.jar"/-->
        <javac srcdir="${src}" destdir="${build}" source="${src.version}" target="${src.version}" includeantruntime="false" debug="${debug}">
            <classpath>
                <fileset dir="lib">
                    <include name="*.jar" />
                </fileset>
        		<fileset dir="${zaproxy}/lib">
        			<include name="*.jar" />
        			<exclude name="ant.jar" />
        		</fileset>
        		<fileset dir="${zaproxy}/build/zap">
        			<include name="zap.jar" />
        		</fileset>
        		<pathelement location="${build}"/>
        		<pathelement location="${zaproxy-extensions}/build/build"/>
        		<pathelement location="${zaproxy-extensions-beta}/build/build"/>
        		<pathelement location="${zaproxy-extensions-alpha}/build/build"/>
            </classpath>
        </javac>
        <javac srcdir="${zaproxy}/test" destdir="${build}" source="${src.version}" target="${src.version}" includeantruntime="false" debug="${debug}">
            <classpath>
                <fileset dir="${zaproxy}/testlib">
                    <include name="*.jar" />
                </fileset>
                <fileset dir="${zaproxy}/lib">
                    <include name="*.jar" />
                    <exclude name="ant.jar" />
                </fileset>
                <fileset dir="${zaproxy}/build/zap">
                    <include name="zap.jar" />
                </fileset>
            </classpath>
        </javac>
    </target>

	<target name="test" depends="compile">
        <!-- Run the JUnit tests -->
        <junit printsummary="yes" haltonerror="on">
            <classpath>
        		<fileset dir="lib">
        			<include name="*.jar" />
        			<exclude name="ant*.jar" />
        		</fileset>
        		<fileset dir="${zaproxy}/lib">
        			<include name="*.jar" />
        			<exclude name="ant*.jar" />
        			<exclude name="junit*.jar" />
        		</fileset>
        		<fileset dir="${zaproxy}/build/zap">
        			<include name="zap.jar" />
        			<exclude name="ant*.jar" />
        		</fileset>
            	
        		<pathelement location="${zaproxy-extensions}/bin"/>		<!-- When running in Eclipse -->
        		<pathelement location="${zaproxy-extensions}/build/build"/>	<!-- When running on build server -->
        		<pathelement location="${zaproxy-extensions-beta}/bin"/>
        		<pathelement location="${zaproxy-extensions-beta}/build/build"/>
        		<pathelement location="${zaproxy-extensions-alpha}/bin"/>
        		<pathelement location="${zaproxy-extensions-alpha}/build/build"/>
        		<pathelement location="bin"/>		<!-- When running in Eclipse -->
        		<pathelement location="build"/>		<!-- When running on build server -->
            </classpath>
            <formatter type="plain"/>
            <formatter type="xml"/>
            <batchtest fork="yes" todir="results">
                <fileset dir="${build}">
                    <include name="**/*UnitTest.class"/>
                    <exclude name="**/Abstract*Test.class"/>
                </fileset>
            </batchtest>
		</junit>
        <!-- Run the quick unit tests -->
		<antcall target="unit-test-start-stop"/> 
		<!-- The 2.2 tests will fail as the add-ons are not backwards compatible
		<antcall target="unit-test-2.2-start-stop"/>
		--> 
	</target>

    <target name="check-for-errors">
    	<!-- Sanity check - there should always be some INFO messages -->
    	<copy file="${test-dir}/test/zap.log" tofile="${test-dir}/test/zap.info">
    	  <filterchain>
    	    <linecontains>
    	      <contains value="INFO"/>
    	    </linecontains>
    	  </filterchain>
    	</copy>
    	
    	<fail message="No INFO messages in ${test-dir}/test/zap.log'">
		    <condition>
		    	<length file="${test-dir}/test/zap.info" when="eq" length="0" />
		    </condition>
		</fail>

    	<!-- Now check for errors -->
    	<copy file="${test-dir}/test/zap.log" tofile="${test-dir}/test/zap.errors">
    	  <filterchain>
    	    <linecontains>
    	      <contains value="ERROR"/>
    	    </linecontains>
    	  </filterchain>
    	</copy>
    	
    	<!-- Echo any found to the console - cant use loadfile as it fails on empty files -->
    	<concat>
    	    <fileset file="${test-dir}/test/zap.errors"/>
    	</concat>

		<fail message="Found ERROR messages in ${test-dir}/test/zap.log">
		    <condition>
		    	<!-- Error check - there shouldnt be any ERROR messages -->
		    	<length  file="${test-dir}/test/zap.errors" when="gt" length="0" />
		    </condition>
		</fail>
    	
	</target>

    <target name="deploy-addons">
        <!--  Deploy all release add-ons -->
    	<copy todir="${test-dir}/plugin" overwrite="true">
            <fileset dir="${zaproxy-extensions}/build/zap-exts" includes="*.zap" excludes="example*"/>
        </copy>

        <!--  Deploy all beta add-ons -->
    	<copy todir="${test-dir}/plugin" overwrite="true">
            <fileset dir="${zaproxy-extensions-beta}/build/zap-exts" includes="*.zap"/>
        </copy>

        <!--  Deploy all alpha add-ons -->
    	<!-- Hold off doing this for now - too many errors
    	<copy todir="${test-dir}/plugin" overwrite="true">
            <fileset dir="${zaproxy-extensions-alpha}/build/zap-exts" includes="*.zap"/>
        </copy>
        -->
	</target>

    <target name="deploy-to">
        <!--  Deploy ZAP -->
    	<copy todir="${test-dir}">
            <fileset dir="${zaproxy}/build/zap" />
        </copy>
    	<chmod file="${test-dir}/zap.sh" perm="u+x"/>

		<antcall target="deploy-addons"> 
			<param name="test-dir" location="${test-dir}"/>
		</antcall>
	</target>
	
    <target name="deploy-2.2-to">
        <!--  Deploy ZAP -->
    	<copy todir="${test-dir}">
            <fileset dir="${zaproxy-2.2}/build/zap" />
        </copy>
    	<chmod file="${test-dir}/zap.sh" perm="u+x"/>

		<antcall target="deploy-addons"> 
			<param name="test-dir" location="${test-dir}"/>
		</antcall>
	</target>
	
    <target name="unit-test-start-stop">
    	<!-- Start and stop ZAP as a daemon and check if any errors logged -->
    	
    	<property name="test-dir" value="start-stop-dir" />

        <delete dir="${test-dir}" includeEmptyDirs="true" />
        <mkdir dir="${test-dir}" />
    	
		<antcall target="deploy-to"> 
			<param name="test-dir" location="${test-dir}"/>
		</antcall>

        <condition property="script" value="zap.bat" else="./zap.sh">
            <istrue value="${isWindows}" />
        </condition>

        <local name="zapport" />
        <property name="zapport" value="8090" />

    	<exec dir="${test-dir}" executable="${script}" spawn="true">
    	    <arg value="-daemon"/>
    	    <arg line="-dir test"/>
    	    <arg value="-port"/>
    	    <arg value="${zapport}"/>
    	</exec>

    	<stopzapwithtimeout zapaddress="localhost" zapport="${zapport}" timeout="60" pollinginterval="1" />

    	<!-- Give time to shut down -->
        <sleep seconds="5"/>

		<antcall target="check-for-errors"> 
			<param name="test-dir" location="${test-dir}"/> 
		</antcall>

    </target>

    <target name="unit-test-2.2-start-stop">
    	<!-- Start and stop ZAP 2.2 as a daemon and check if any errors logged -->
    	
    	<property name="test-dir" value="start-stop-2.2-dir" />

        <delete dir="${test-dir}" includeEmptyDirs="true" />
        <mkdir dir="${test-dir}" />
    	
		<antcall target="deploy-2.2-to"> 
			<param name="test-dir" location="${test-dir}"/>
		</antcall>

        <condition property="script" value="zap.bat" else="./zap.sh">
            <istrue value="${isWindows}" />
        </condition>

        <local name="zapport" />
        <property name="zapport" value="8090" />

    	<exec dir="${test-dir}" executable="${script}" spawn="true">
    	    <arg value="-daemon"/>
    	    <arg line="-dir test"/>
    	    <arg value="-port"/>
    	    <arg value="${zapport}"/>
    	</exec>

        <stopzapwithtimeout zapaddress="localhost" zapport="${zapport}" timeout="60" pollinginterval="1" />

    	<!-- Give time to shut down -->
        <sleep seconds="5"/>

		<antcall target="check-for-errors"> 
			<param name="test-dir" location="${test-dir}"/> 
		</antcall>

    </target>

    <target name="unit-test">
    	<!--
    		A parameterized task for running command line scans of urls.
    		Do not call directly.
    		You should typicaly have built zaproxy zaproxy-extensions and zaproxy-extensions-beta prior to this, 
    		but might well not want to do that every time, which is why its not automated. 
    	-->
    	
        <delete dir="${test-dir}" includeEmptyDirs="true" />
        <mkdir dir="${test-dir}" />
    	
		<antcall target="deploy-to"> 
			<param name="test-dir" location="${test-dir}"/>
		</antcall>

        <condition property="script" value="zap.bat" else="./zap.sh">
            <istrue value="${isWindows}" />
        </condition>

    	<exec dir="${test-dir}" executable="${script}">
    	    <arg value="-cmd"/>
    	    <arg line="-dir test"/>
    	    <arg value="-quickurl"/>
    	    <arg value="${test-url}"/>
    	    <arg line="-quickout scan-result.xml"/>
    	    <arg line="-port 8090"/>
    	</exec>
    	
		<antcall target="check-for-errors"> 
			<param name="test-dir" location="test-bodgeit"/> 
		</antcall>

    	<!-- TODO 
    		compare results! 
    	 -->
    </target>
	
    <target name="unit-test-bodgeit">
		<antcall target="unit-test"> 
			<param name="test-dir" location="test-bodgeit"/> 
			<param name="test-url" value="http://localhost:8080/bodgeit/"/> 
		</antcall>
    </target>


	<target name="bodgeittest" depends="compile">
		
		<!-- Start ZAP -->
		<antcall target="startZapDaemon" />
		<!--
		<antcall target="startZapDaemon" />
		-->

        <!-- Run the Bodgeit JUnit tests -->
        <junit printsummary="yes" haltonerror="on">
            <classpath>
        		<fileset dir="lib">
        			<include name="*.jar" />
        			<exclude name="ant*.jar" />
        		</fileset>
        		<fileset dir="${zaproxy}/lib">
        			<include name="*.jar" />
        			<exclude name="junit*.jar" />
        			<exclude name="mockito*.jar" />
        		</fileset>
        		<fileset dir="${zaproxy}/build/zap">
        			<include name="zap.jar" />
        		</fileset>
        		<pathelement location="bin"/>		<!-- When running in Eclipse -->
        		<pathelement location="build"/>		<!-- When running on build server -->
            </classpath>
            <formatter type="plain"/>
            <formatter type="xml"/>
            <batchtest fork="yes" todir="results">
                <fileset dir="src">
                    <include name="org/zaproxy/zap/BodgeItIntegrationTest.java"/>
                </fileset>
            </batchtest>
		</junit>

		<!-- Stop ZAP -->
	    <!--stopZapTask zapAddress="${zapaddr}" zapPort="${zapport}"/-->

	</target>

	<property name="zapaddr" value="localhost" />
	<property name="zapport" value="8090" />
	<property name="zapdir" value="/home/simon/tools/zap" />
	
	<target name="startZap">
		<java classname="org.zaproxy.zap.ZAP" fork="true" spawn="true" dir="${zapdir}">
			<arg value="-port"/>
			<arg value="${zapport}"/>
			<classpath>
				<pathelement location="${zapdir}/zap.jar"/>
			</classpath>
		</java>
		<!-- Give ZAP a chance to start -->
		<sleep seconds="20"/>
	</target>

	<target name="startZapDaemon">
		<java classname="org.zaproxy.zap.ZAP" fork="true" spawn="true" dir="${zapdir}">
			<arg value="-daemon"/>
			<arg value="-port"/>
			<arg value="${zapport}"/>
			<classpath>
				<pathelement location="${zapdir}/zap.jar"/>
			</classpath>
		</java>
		<!-- Give ZAP a chance to start -->
		<sleep seconds="20"/>
	</target>

	<target name="stopZap">
	    <stopZapTask zapAddress="${zapaddr}" zapPort="${zapport}" debug="true"/>
	</target>

	
</project>